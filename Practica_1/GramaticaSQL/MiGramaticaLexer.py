# Generated from MiGramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,108,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        12,1,12,5,12,75,8,12,10,12,12,12,78,9,12,1,13,4,13,81,8,13,11,13,
        12,13,82,1,13,1,13,4,13,87,8,13,11,13,12,13,88,3,13,91,8,13,1,14,
        1,14,5,14,95,8,14,10,14,12,14,98,9,14,1,14,1,14,1,15,4,15,103,8,
        15,11,15,12,15,104,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,5,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,
        10,13,13,39,39,3,0,9,10,13,13,32,32,113,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,
        40,1,0,0,0,5,45,1,0,0,0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,
        13,57,1,0,0,0,15,59,1,0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,66,1,
        0,0,0,23,69,1,0,0,0,25,72,1,0,0,0,27,80,1,0,0,0,29,92,1,0,0,0,31,
        102,1,0,0,0,33,34,5,83,0,0,34,35,5,69,0,0,35,36,5,76,0,0,36,37,5,
        69,0,0,37,38,5,67,0,0,38,39,5,84,0,0,39,2,1,0,0,0,40,41,5,70,0,0,
        41,42,5,82,0,0,42,43,5,79,0,0,43,44,5,77,0,0,44,4,1,0,0,0,45,46,
        5,87,0,0,46,47,5,72,0,0,47,48,5,69,0,0,48,49,5,82,0,0,49,50,5,69,
        0,0,50,6,1,0,0,0,51,52,5,42,0,0,52,8,1,0,0,0,53,54,5,44,0,0,54,10,
        1,0,0,0,55,56,5,59,0,0,56,12,1,0,0,0,57,58,5,62,0,0,58,14,1,0,0,
        0,59,60,5,60,0,0,60,16,1,0,0,0,61,62,5,61,0,0,62,18,1,0,0,0,63,64,
        5,62,0,0,64,65,5,61,0,0,65,20,1,0,0,0,66,67,5,60,0,0,67,68,5,61,
        0,0,68,22,1,0,0,0,69,70,5,33,0,0,70,71,5,61,0,0,71,24,1,0,0,0,72,
        76,7,0,0,0,73,75,7,1,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,
        0,76,77,1,0,0,0,77,26,1,0,0,0,78,76,1,0,0,0,79,81,7,2,0,0,80,79,
        1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,90,1,0,0,0,
        84,86,5,46,0,0,85,87,7,2,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,
        0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,84,1,0,0,0,90,91,1,0,0,0,91,
        28,1,0,0,0,92,96,5,39,0,0,93,95,8,3,0,0,94,93,1,0,0,0,95,98,1,0,
        0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,
        5,39,0,0,100,30,1,0,0,0,101,103,7,4,0,0,102,101,1,0,0,0,103,104,
        1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,107,
        6,15,0,0,107,32,1,0,0,0,7,0,76,82,88,90,96,104,1,6,0,0
    ]

class MiGramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELECT = 1
    FROM = 2
    WHERE = 3
    STAR = 4
    COMMA = 5
    SEMI = 6
    GT = 7
    LT = 8
    EQ = 9
    GE = 10
    LE = 11
    NE = 12
    IDENTIFIER = 13
    NUMBER = 14
    STRING = 15
    WS = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'SELECT'", "'FROM'", "'WHERE'", "'*'", "','", "';'", "'>'", 
            "'<'", "'='", "'>='", "'<='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "WHERE", "STAR", "COMMA", "SEMI", "GT", "LT", 
            "EQ", "GE", "LE", "NE", "IDENTIFIER", "NUMBER", "STRING", "WS" ]

    ruleNames = [ "SELECT", "FROM", "WHERE", "STAR", "COMMA", "SEMI", "GT", 
                  "LT", "EQ", "GE", "LE", "NE", "IDENTIFIER", "NUMBER", 
                  "STRING", "WS" ]

    grammarFileName = "MiGramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


