# Generated from Condicionales.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,91,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,5,15,75,8,15,10,15,12,15,78,9,15,1,16,4,16,81,8,16,
        11,16,12,16,82,1,17,4,17,86,8,17,11,17,12,17,87,1,17,1,17,0,0,18,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,1,0,4,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,93,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,0,
        7,44,1,0,0,0,9,46,1,0,0,0,11,48,1,0,0,0,13,50,1,0,0,0,15,52,1,0,
        0,0,17,55,1,0,0,0,19,58,1,0,0,0,21,60,1,0,0,0,23,62,1,0,0,0,25,65,
        1,0,0,0,27,68,1,0,0,0,29,70,1,0,0,0,31,72,1,0,0,0,33,80,1,0,0,0,
        35,85,1,0,0,0,37,38,5,61,0,0,38,2,1,0,0,0,39,40,5,59,0,0,40,4,1,
        0,0,0,41,42,5,105,0,0,42,43,5,102,0,0,43,6,1,0,0,0,44,45,5,40,0,
        0,45,8,1,0,0,0,46,47,5,41,0,0,47,10,1,0,0,0,48,49,5,123,0,0,49,12,
        1,0,0,0,50,51,5,125,0,0,51,14,1,0,0,0,52,53,5,61,0,0,53,54,5,61,
        0,0,54,16,1,0,0,0,55,56,5,33,0,0,56,57,5,61,0,0,57,18,1,0,0,0,58,
        59,5,60,0,0,59,20,1,0,0,0,60,61,5,62,0,0,61,22,1,0,0,0,62,63,5,60,
        0,0,63,64,5,61,0,0,64,24,1,0,0,0,65,66,5,62,0,0,66,67,5,61,0,0,67,
        26,1,0,0,0,68,69,5,43,0,0,69,28,1,0,0,0,70,71,5,42,0,0,71,30,1,0,
        0,0,72,76,7,0,0,0,73,75,7,1,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,
        1,0,0,0,76,77,1,0,0,0,77,32,1,0,0,0,78,76,1,0,0,0,79,81,7,2,0,0,
        80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,34,1,
        0,0,0,84,86,7,3,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,
        88,1,0,0,0,88,89,1,0,0,0,89,90,6,17,0,0,90,36,1,0,0,0,4,0,76,82,
        87,1,6,0,0
    ]

class CondicionalesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    ID = 16
    NUMBER = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "';'", "'if'", "'('", "')'", "'{'", "'}'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'+'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "ID", "NUMBER", "WS" ]

    grammarFileName = "Condicionales.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


